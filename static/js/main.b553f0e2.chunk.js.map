{"version":3,"sources":["Badge2.js","Badge.js","Record2.js","Record.js","TagBadge.js","ResetTagBadge.js","Tag.js","Top.js","Main.js","App.js","reportWebVitals.js","index.js"],"names":["Badge2","props","useDrag","item","type","ItemTypes","Badge","collect","monitor","isDragging","end","draggedItem","getDropResult","console","log","addRecordList","badge","drag","className","ref","style","opacity","color","backgroundColor","onClick","bind","this","rmBadge","index","badgeList","map","length","i","Record2","record","contentEditable","Record","useDrop","accept","drop","id","recordList","TagBadge","ResetTagBadge","Tag","display","flexWrap","justifyContent","alignItems","Top","useState","inptVal","setInptVal","setbadgeList","setRecordList","scroller","scrollTo","duration","delay","smooth","containerId","nm","txtClr","bgClr","will","slice","value","onChange","e","val","chngNm","target","chngFntClr","chngBdgClr","DndProvider","backend","HTML5Backend","arry","filter","itemIndex","Main","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b553f0e2.chunk.js","sourcesContent":["import { ItemTypes } from './Top'\r\nimport { useDrag } from 'react-dnd'\r\n\r\n\r\nfunction Badge2(props) {\r\n    const [{ isDragging }, drag] = useDrag(() => ({\r\n        item: [props],\r\n        type: ItemTypes.Badge,\r\n        collect: monitor => ({\r\n            isDragging: !!monitor.isDragging(),\r\n        }),\r\n        end: (draggedItem, monitor) => {\r\n            if (monitor.getDropResult()) {\r\n                console.log(draggedItem)\r\n                props.addRecordList(draggedItem[0].badge)\r\n            }\r\n        }\r\n    }), [props])\r\n    return (\r\n        <div>\r\n            <div key={props.index}\r\n                className=\"badge-area\"\r\n                ref={drag}\r\n                style={{\r\n                    opacity: isDragging ? 0.5 : 1,\r\n\r\n                }}\r\n            >\r\n                <div className=\"badge\"\r\n                    style={{\r\n                        color: props.badge[1],\r\n                        backgroundColor: props.badge[2],\r\n                    }}\r\n                    onClick={props.addRecordList.bind(this, props.badge)}\r\n                >\r\n                    <span>{props.badge[0]}</span>\r\n                </div>\r\n                <div className=\"del-btn\"\r\n                    onClick={props.rmBadge.bind(this, props.index)}\r\n                >\r\n                    <span className=\"del-btn-v\"></span>\r\n                    <span className=\"del-btn-h\"></span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Badge2;","import React from \"react\";\r\nimport './Badge.css'\r\nimport Badge2 from \"./Badge2\";\r\n\r\n\r\nfunction Badge(props) {\r\n\r\n    return (\r\n        <>\r\n            {\r\n                props.badgeList.map((badge, index) => (\r\n                    <>\r\n                        {badge.length > 0 &&\r\n                            <Badge2 key={'badge2_' + index} badge={badge} index={index} rmBadge={(i) => props.rmBadge(i)} addRecordList={(badge) => props.addRecordList(badge)}></Badge2>\r\n                        }\r\n                    </>\r\n                ))\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport default Badge;\r\n","import \"./Record.css\"\r\n\r\nfunction Record2(props) {\r\n    //recordList\r\n    //  record : { \r\n    //    badge [name, fontcolor, backgroundcolor],\r\n    //    input,  \r\n    // }...\r\n    return (\r\n        <div\r\n            className=\"record-list\"\r\n        >\r\n            <div className=\"badge\"\r\n                style={{\r\n                    color: props.record[0][1],\r\n                    backgroundColor: props.record[0][2],\r\n                }}\r\n            >\r\n                <span>{props.record[0][0]}</span>\r\n            </div>\r\n            <div>\r\n                <div className=\"balloon\" contentEditable=\"true\"></div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\nexport default Record2;","import \"./Record.css\"\r\nimport Record2 from \"./Record2\";\r\nimport { ItemTypes } from './Top'\r\nimport { useDrop } from 'react-dnd'\r\n\r\nfunction Record(props) {\r\n    const [, drop] = useDrop(() => ({\r\n        accept: ItemTypes.Badge,\r\n    }))\r\n\r\n    //recordList\r\n    //  record : { \r\n    //    badge [name, fontcolor, backgroundcolor],\r\n    //    input,  \r\n    // }...\r\n    return (\r\n        <div id=\"scroll-container\"\r\n            className=\"record-area\"\r\n            ref={drop}\r\n        >\r\n            {props.recordList.map((record, index) => (\r\n                <Record2 record={record} index={index} key={'record2_' + index}></Record2>\r\n            ))}\r\n            <div id=\"scroll-target\"></div>\r\n        </div>\r\n    );\r\n\r\n}\r\nexport default Record;","import './TagBadge.css'\r\n\r\n\r\nfunction TagBadge(props) {\r\n    return (\r\n        <>\r\n            <div className={props.type}>\r\n                {props.type}\r\n            </div>\r\n        </>\r\n    );\r\n\r\n}\r\nexport default TagBadge;","\r\n\r\nfunction ResetTagBadge(props) {\r\n    return (\r\n        <>\r\n        </>\r\n    );\r\n\r\n}\r\nexport default ResetTagBadge;","import './Tag.css'\r\nimport TagBadge from './TagBadge'\r\nimport ResetTagBadge from './ResetTagBadge'\r\n\r\nfunction Tag(props) {\r\n    return (\r\n        <div className={'tag_area'}>\r\n            <div\r\n                style={{\r\n                    display: 'flex',\r\n                    flexWrap: 'wrap',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center',\r\n                }}\r\n            >\r\n                <TagBadge type={'homework'} ></TagBadge>\r\n                <TagBadge type={'decide'}></TagBadge>\r\n                <TagBadge type={'question'}></TagBadge>\r\n            </div>\r\n            <div>\r\n                <ResetTagBadge></ResetTagBadge>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Tag;","import React, { useState } from 'react';\r\nimport Badge from \"./Badge\";\r\nimport Record from \"./Record\"\r\nimport { DndProvider } from 'react-dnd'\r\nimport { HTML5Backend } from 'react-dnd-html5-backend'\r\nimport { scroller } from 'react-scroll'\r\nimport Tag from './Tag';\r\n\r\nfunction Top() {\r\n\r\n    const [inptVal, setInptVal] = useState(['', '#000000', '#FFAFAF'])\r\n\r\n    //badgeList\r\n    //  badge: [[name, fontcolor, backgroundcolor]...]\r\n    const [badgeList, setbadgeList] = useState([[]]);\r\n\r\n    //recordList\r\n    //  record : [\r\n    //    badge [name, fontcolor, backgroundcolor],\r\n    //    input\r\n    // ] \r\n    const [recordList, setRecordList] = useState([]);\r\n\r\n    const rmBadge = (index) => {\r\n        let arry = badgeList.filter((item, itemIndex) => itemIndex !== index)\r\n        setbadgeList(arry);\r\n    }\r\n\r\n    const addRecordList = (badge) => {\r\n        setRecordList([...recordList, [badge, '']]);\r\n        scroller.scrollTo('scroll-target', {\r\n            duration: 800,\r\n            delay: 0,\r\n            smooth: 'easeInOutQuart',\r\n            containerId: 'scroll-container'\r\n        });\r\n    }\r\n\r\n    const addBadge = () => {\r\n        let nm = inptVal[0];\r\n        let txtClr = inptVal[1];\r\n        let bgClr = inptVal[2];\r\n        setbadgeList([...badgeList, [nm, txtClr, bgClr]]);\r\n        let will = inptVal.slice();\r\n        will[0] = '';\r\n        setInptVal(will)\r\n    }\r\n    const chngBdgClr = (val) => {\r\n        let will = inptVal.slice();\r\n        will[2] = val;\r\n        setInptVal(will)\r\n    }\r\n    const chngFntClr = (val) => {\r\n        let will = inptVal.slice();\r\n        will[1] = val;\r\n        setInptVal(will)\r\n    }\r\n    const chngNm = (val) => {\r\n        let will = inptVal.slice();\r\n        will[0] = val;\r\n        setInptVal(will)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>test</h1>\r\n            <hr></hr>\r\n            <button onClick={addBadge}>THIS WILL ADD SPAN</button>\r\n            <hr></hr>\r\n            <input type=\"text\" value={inptVal[0]} onChange={(e) => { chngNm(e.target.value) }}></input>\r\n            <input type=\"color\" value={inptVal[1]} onChange={(e) => { chngFntClr(e.target.value) }}></input>\r\n            <input type=\"color\" value={inptVal[2]} onChange={(e) => { chngBdgClr(e.target.value) }}></input>\r\n            <DndProvider backend={HTML5Backend}>\r\n                <div style={{\r\n                    display: \"flex\",\r\n                }}>\r\n                    <Badge badgeList={badgeList} rmBadge={(i) => rmBadge(i)} addRecordList={(badge) => addRecordList(badge)}></Badge>\r\n                </div>\r\n                <hr></hr>\r\n                <div style={{\r\n                    display: \"flex\",\r\n                }}>\r\n                    <div style={{\r\n                        display: \"flex\",\r\n                    }}>\r\n                        <Record recordList={recordList} addRecordList={(badge) => addRecordList(badge)}>\r\n                        </Record>\r\n                    </div>\r\n                    <div style={{\r\n                        display: \"flex\",\r\n                    }}>\r\n                        <Tag></Tag>\r\n                    </div>\r\n                </div>\r\n                <hr></hr>\r\n            </DndProvider>\r\n        </>\r\n    );\r\n}\r\nexport const ItemTypes = {\r\n    Badge: 'Badge'\r\n}\r\n\r\nexport default Top;\r\n","\r\nfunction Main() {\r\n    return (\r\n        <>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Main;\r\n","import './App.css';\nimport Top from './Top.js'\nimport Main from './Main.js'\n\nfunction App() {\n  return (\n    <>\n      <Top></Top>\n      <Main></Main>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}